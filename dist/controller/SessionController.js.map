{"version":3,"sources":["../../src/controller/SessionController.js"],"names":["req","res","allSessions","map","session","status","json","message","startAllSessions","params","startSession","clientsArray","close","sessions","filter","item","io","emit","closeSession","showAllSessions","send","auth","isConnected","response","checkSessionConnected"],"mappings":";;;;;;;;;;;;;;;;wFAIO,kBAAgCA,GAAhC,EAAqCC,GAArC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACuB,6BADvB;;AAAA;AACGC,mCADH;;;AAGHA,oCAAYC,GAAZ;AAAA,iHAAgB,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDACN,iCAASJ,GAAT,EAAcC,GAAd,EAAmB,6BAAWG,OAAX,CAAnB,CADM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAhB;;AAAA;AAAA;AAAA;AAAA;;AAHG;AAAA,+BAOUH,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACD,QAAQ,SAAT,EAAoBE,SAAS,4BAA7B,EAArB,CAPV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,gB;;;;;;yFAUf,kBAA4BR,GAA5B,EAAiCC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACIG,+BADJ,GACeJ,IAAIS,MADnB,CACIL,OADJ;AAAA;AAAA,+BAGG,iCAASJ,GAAT,EAAcC,GAAd,EAAmB,6BAAWG,OAAX,CAAnB,CAHH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeM,Y;;;;;;yFAMf,kBAA4BV,GAA5B,EAAiCC,GAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AACIG,+BADJ,GACeJ,IAAIS,MADnB,CACIL,OADJ;AAAA;AAAA,+BAGGO,0BAAa,6BAAWP,OAAX,CAAb,EAAkCQ,KAAlC,EAHH;;AAAA;AAIHC,8CAASC,MAAT,CAAgB;AAAA,mCAAQC,SAASX,OAAjB;AAAA,yBAAhB,EAJG,CAIuC;;AAE1CJ,4BAAIgB,EAAJ,CAAOC,IAAP,CAAY,iBAAZ,EAA+B,KAA/B;;AANG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeC,Y;;;;;;yFASf,kBAA+BlB,GAA/B,EAAoCC,GAApC;AAAA;AAAA;AAAA;AAAA;AACHA,4BAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBO,qBAArB,EADG,CAC6B;;AAD7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeM,e;;;;;;yFAIf,kBAAqCnB,GAArC,EAA0CC,GAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AACIG,+BADJ,GACeJ,IAAIS,MADnB,CACIL,OADJ;;AAAA,4BAGE,6BAAWA,OAAX,CAHF;AAAA;AAAA;AAAA;;AAAA,0DAIQH,IAAII,MAAJ,CAAW,GAAX,EAAgBe,IAAhB,CAAqB,EAACC,MAAM,KAAP,EAAcd,SAAS,uBAAvB,EAArB,CAJR;;AAAA;AAAA;AAAA;AAAA,+BAOwBI,0BAAa,6BAAWP,OAAX,CAAb,EAAkCkB,WAAlC,EAPxB;;AAAA;AAOOC,gCAPP;AAAA,0DAQQtB,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBiB,sCAAUA,QADc;AAExBhB,qCAAS;AAFe,yBAArB,CARR;;AAAA;AAAA;AAAA;AAAA,0DAcQN,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBiB,sCAAU,KADc;AAExBhB,qCAAS;AAFe,yBAArB,CAdR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,K;;oBAAeiB,qB;;;;;AAjCtB;;AACA;;AACA","file":"SessionController.js","sourcesContent":["import {clientsArray, getSession, sessions} from \"../util/SessionUtil\";\nimport {opendata} from \"../util/CreateSessionUtil\";\nimport getAllTokens from \"../util/GetAllTokens\";\n\nexport async function startAllSessions(req, res) {\n    const allSessions = await getAllTokens();\n\n    allSessions.map(async (session) => {\n        await opendata(req, res, getSession(session))\n    })\n\n    return await res.status(200).json({status: \"Success\", message: \"Iniciando todas as sessões\"})\n}\n\nexport async function startSession(req, res) {\n    const {session} = req.params;\n\n    await opendata(req, res, getSession(session))\n}\n\nexport async function closeSession(req, res) {\n    const {session} = req.params;\n\n    await clientsArray[getSession(session)].close();\n    sessions.filter(item => item !== session) //remove a sessão especifica de todas as sessões\n\n    req.io.emit('whatsapp-status', false);\n}\n\nexport async function showAllSessions(req, res) {\n    res.status(200).json(sessions); //mostra todas as sessões que estão ativas\n}\n\nexport async function checkSessionConnected(req, res) {\n    const {session} = req.params;\n\n    if (!getSession(session))\n        return res.status(401).send({auth: false, message: 'Sessão não informada.'});\n\n    try {\n        const response = await clientsArray[getSession(session)].isConnected();\n        return res.status(200).json({\n            response: response,\n            message: 'O Whatsapp está aberto.'\n        })\n\n    } catch (error) {\n        return res.status(200).json({\n            response: false,\n            message: 'O Whatsapp não está aberto.'\n        })\n    }\n}"]}